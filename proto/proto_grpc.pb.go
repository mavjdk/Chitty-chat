// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: proto/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MessageService_MessageRoute_FullMethodName = "/chittychat.messageService/MessageRoute"
)

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	MessageRoute(ctx context.Context, opts ...grpc.CallOption) (MessageService_MessageRouteClient, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) MessageRoute(ctx context.Context, opts ...grpc.CallOption) (MessageService_MessageRouteClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[0], MessageService_MessageRoute_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceMessageRouteClient{stream}
	return x, nil
}

type MessageService_MessageRouteClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type messageServiceMessageRouteClient struct {
	grpc.ClientStream
}

func (x *messageServiceMessageRouteClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageServiceMessageRouteClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	MessageRoute(MessageService_MessageRouteServer) error
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) MessageRoute(MessageService_MessageRouteServer) error {
	return status.Errorf(codes.Unimplemented, "method MessageRoute not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_MessageRoute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServiceServer).MessageRoute(&messageServiceMessageRouteServer{stream})
}

type MessageService_MessageRouteServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type messageServiceMessageRouteServer struct {
	grpc.ServerStream
}

func (x *messageServiceMessageRouteServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageServiceMessageRouteServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chittychat.messageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MessageRoute",
			Handler:       _MessageService_MessageRoute_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/proto.proto",
}

const (
	VectorClockService_VectorClockService_FullMethodName = "/chittychat.vectorClockService/vectorClockService"
)

// VectorClockServiceClient is the client API for VectorClockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VectorClockServiceClient interface {
	VectorClockService(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VectorClock, error)
}

type vectorClockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVectorClockServiceClient(cc grpc.ClientConnInterface) VectorClockServiceClient {
	return &vectorClockServiceClient{cc}
}

func (c *vectorClockServiceClient) VectorClockService(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VectorClock, error) {
	out := new(VectorClock)
	err := c.cc.Invoke(ctx, VectorClockService_VectorClockService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VectorClockServiceServer is the server API for VectorClockService service.
// All implementations must embed UnimplementedVectorClockServiceServer
// for forward compatibility
type VectorClockServiceServer interface {
	VectorClockService(context.Context, *Empty) (*VectorClock, error)
	mustEmbedUnimplementedVectorClockServiceServer()
}

// UnimplementedVectorClockServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVectorClockServiceServer struct {
}

func (UnimplementedVectorClockServiceServer) VectorClockService(context.Context, *Empty) (*VectorClock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VectorClockService not implemented")
}
func (UnimplementedVectorClockServiceServer) mustEmbedUnimplementedVectorClockServiceServer() {}

// UnsafeVectorClockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VectorClockServiceServer will
// result in compilation errors.
type UnsafeVectorClockServiceServer interface {
	mustEmbedUnimplementedVectorClockServiceServer()
}

func RegisterVectorClockServiceServer(s grpc.ServiceRegistrar, srv VectorClockServiceServer) {
	s.RegisterService(&VectorClockService_ServiceDesc, srv)
}

func _VectorClockService_VectorClockService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorClockServiceServer).VectorClockService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VectorClockService_VectorClockService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorClockServiceServer).VectorClockService(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// VectorClockService_ServiceDesc is the grpc.ServiceDesc for VectorClockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VectorClockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chittychat.vectorClockService",
	HandlerType: (*VectorClockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "vectorClockService",
			Handler:    _VectorClockService_VectorClockService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proto.proto",
}
